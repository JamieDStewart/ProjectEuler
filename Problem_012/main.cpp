/**
* Problem 12
* The sequence of triangle numbers is generated by adding the natural numbers. 
* So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
* The first ten terms would be:
*  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
*
* Let us list the factors of the first seven triangle numbers:
*   1:1
*   3: 1, 3
*   6: 1, 2, 3, 6
*  10: 1, 2, 5, 10
*  15: 1, 3, 5, 15
*  21: 1, 3, 7, 21
*  28: 1, 2, 4, 7, 14, 28 
*  
* We can see that 28 is the first triangle number to have over five divisors.
* What is the value of the first triangle number to have over five hundred divisors?
*/

#include <cstdio>
#include <string>
#include <sstream>
#include <vector>

long max(long x, long y)
{
	return (x > y) ? x : y;
}

int main(int argc, char* argv[])
{
    int64_t current_number = 0;
    int64_t triangle_number = 0;
    int32_t num_factors = 0;
    while (num_factors < 500)
    {
        //Increment the current number and add it to the total running sum
        current_number++;
        triangle_number += current_number;
        
        //set factor count to zero
        num_factors = 0;
        // start testsing factor with value 1 (1 is a factor of all numbers)
        int64_t factor = 1;
        //Only need to test up to the square root of a number to reduce range of tests
        int64_t tri_sqrt = sqrtf(triangle_number);
        while (factor <= tri_sqrt )
        {
            // if mod and triangle number is zero then factor is a factor of this number increment factor count
            if (triangle_number % factor == 0) 
            {
                //if number / factor is not equal to factor then a corresponding value large than the square root is a factor
                num_factors += (factor != tri_sqrt) ? 2 : 1;
            }
            factor++;
        }        
        
    }
	printf("The value of the first triangle number to have over 500 factors is: %i", triangle_number);
	return 0;
}